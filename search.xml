<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[markdown语法总结]]></title>
    <url>%2Fblog%2Fexpres%E7%9A%84%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[关于markdownmarkdown是一种纯文本格式的标记语言，采用标记语法，从而是文本达到一定的格式，对于程序员来说，是一门很好的书写语言在日常的开发中，可以将开发心得和学习的新技能以漂亮的文本格式记录下来，程序员再也不用担心写作啦！ 标题一级标题二级标题三级标题四级标题五级标题六级标题分段标题1分段标题2粗斜体 斜体文本 粗体文本 粗斜体文本 链接 文字链接 这是一个网址 网址链接 https://www.baidu.com 高级链接技巧可以将链接地址作为变量引用 Google最后在结尾处给变量赋值 列表普通无序列表 列表文本前使用，注意有一个空格 列表文本前使用，注意有一个空格 列表文本前使用，注意有一个空格普通有序列表 数字加空格 数字加空格 如果数字顺序不对，markdown在显示时会自动将数字转正过来嵌套列表 一级有序列表项 二级无序列表项 二级无序列表项 三级有序列表项 三级有序列表项 列表里引用： 列表前空一行，然后空四格使用&gt; 列表里的代码段 123// 在列表项后面空四格，然后可以像平常使用代码段那样的书写方式const hello = 'hello world'console.log(hello) 引用 >前面空一格，在后面接上引用内容 引用也可以嵌套多层 子列表需要空四格后开始 图片链接 和引入网址一样的书写方法，在最前面加一个！ 图片链接的高级技巧这个链接使用1作为变量小黄人.在markdown结尾处给变量赋值 换行 如果需要另起一行，在当前行的结尾处空两格，按回车，文本会自动换行这是换行后的文本 分隔符分割线 另起一行，连续输入三个减号 -，当分隔符前后都有段落时，请前后都空一行 这是分隔符后面的段落 符号转义当文本中包含markdown语法里的特殊符号，又不想被转义时，可以使用\加想被忽略的符号 ‘\&lt;’会显示 &lt;不会被当作引用符号]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>markwown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js位运算符]]></title>
    <url>%2Fblog%2Fjs%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[js位运算符 位运算符只针对数字的二进制形式进行 按位与 &amp;在计算机中，所有的数字都是以二进制存储，let n1 = 5 在计算机中表示为00000101; let n2 = 6 在计算机中表示为00000110按位与的计算方法是 相同位上，两者都为1，则结果为1，两者有一个为0，则结果为0故n1 &amp; n2为 00000101 &amp; 00000110 ==&gt; 00000100 转译成十进制结果是4 按位或 |二进制数字按位或的计算规则是1 | 1 =&gt; 11 | 0 =&gt; 10 | 1 =&gt; 10 | 0 =&gt; 0相同位上，只要两者其中有一位是1，则结果为1。 let n1 = 5 00000101let n2 = 6 00000110n1 | n200000101 | 00000110 ==&gt; 00000111 转译为十进制为 7 按位非 ~二进制数字按位非的计算规则是~1 ==&gt; 0~0 ==&gt; 1let n1 = 5 00000101~n1 ==&gt; 11111010 转译为十进制为-6]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react-hooks]]></title>
    <url>%2Fblog%2Freact-hooks%2F</url>
    <content type="text"><![CDATA[react-hooks （一）&nbsp;&nbsp;&nbsp;&nbsp;hooks尚未正式推出前 就在react官方文档上了解了一下，当时不太明白hooks的作用以及相比class组件有哪些优势，只记得有一点说是可以更好的将相关逻辑聚合在一起，以达到更高的复用性。咋一看没明白意思，class组件里的生命周期钩子组织代码不是更加清晰吗。最近使用hooks写了一份demo，在练习的过程中，对官方的说明也逐渐理解了一些。&nbsp;&nbsp;&nbsp;&nbsp;以往的class组件，在组件从挂载到卸载的各个生命周期阶段，都会有相应的钩子函数，开发的过程中可以在各个生命周期钩子中编写相关的代码。但这样也会带来的一定的问题，以官方的例子来说明 订阅好友在线状态和改变网页标题123456789101112131415161718192021222324252627282930313233343536373839class FriendStatusWithCounter extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; count: 0, isOnline: null &#125;; this.handleStatusChange = this.handleStatusChange.bind(this); &#125; componentDidMount() &#123; document.title = `You clicked $&#123;this.state.count&#125; times`; ChatAPI.subscribeToFriendStatus( this.props.friend.id, this.handleStatusChange ); &#125; componentDidUpdate() &#123;// 相同的逻辑在componentDidMount中已经实现了一遍，重复代码。 // 且理解上不直观，如果这里是大量的计算开销，或者异步请求等，即便封装成函数也需要在两个生命周期里调用 document.title = `You clicked $&#123;this.state.count&#125; times`; &#125; componentWillUnmount() &#123;// 取消订阅与挂载阶段的开始订阅对应，以组件生命周期来说，很好理解：挂载阶段开始订阅，卸载阶段取消订阅。 // 但是两个地方代码其都是用来处理订阅功能，却被分散到不同的钩子中。 // 带来的问题首先是订阅相关的功能不能复用，虽然可以用高阶组件的形式来达到复用，但仅仅只为一个功能的复用而使用高阶组件包裹有些浪费。 // 如果在挂载和卸载阶段还有更多需要完成的功能，比如大量的监听事件，当然这些都可以一起在高阶组件中完成。 // 但这个高阶组件仍不完美，可能有的组件只监听鼠标移动，有的组件鼠标移动和键盘事件甚至更多的事件需要监听。 // 只靠一个高阶组件就无法实现，需要编写能满足多种需求的高阶组件来实现。太多的高阶组件嵌套不利于调试。 ChatAPI.unsubscribeFromFriendStatus( this.props.friend.id, this.handleStatusChange ); &#125; handleStatusChange(status) &#123; this.setState(&#123; isOnline: status.isOnline &#125;); &#125; &nbsp;&nbsp;&nbsp;&nbsp;hooks的出现使得class组件带来的不便得以解决，hooks只能用在函数式组件中，react16.8以前的版本中，函数式组件因为没有实例对象，所以不能拥有自己的状态，也没有生命周期钩子，只能依赖传入的props来实现组件的渲染。hooks利用闭包的形式实现了函数式组件可以拥有自己状态的功能，且useEffect对标的就是类组件的componentDidMount和componentDidUpdate函数，一个函数式组件可以有多个useEffect，这就为相关功能代码的聚合提供了可能。仍热以上述订阅好友在线状态和修改网页标题为例 1234567891011121314151617181920212223242526272829303132const FriendStatusWithCounter: React.FC = () =&gt; &#123; const [count, setCount] = useState&lt;number&gt;(0) const [status, setStatus]= useState&lt;boolean&gt;(false) // 订阅好友在线状态 useEffect(() =&gt; &#123; const isOnline = ChatAPI.subscribeToFriendStatus( this.props.friend.id, this.handleStatusChange ); setStatus(isOnline) return () =&gt; &#123; ChatAPI.unsubscribeFromFriendStatus( this.props.friend.id, this.handleStatusChange ); &#125; &#125;, []) // 修改网页标题 useEffect(() =&gt; &#123; document.title = `You clicked $&#123;this.state.count&#125; times`; &#125;, [count]) return ( &lt;div&gt; &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;点击&lt;/button&gt; &lt;button onClick=&#123;() =&gt; setStatus(!status)&#125;&gt;点击&lt;/button&gt; &lt;div&gt;在线状态&#123;status&#125;&lt;/div&gt; &lt;/div&gt; )&#125; &nbsp;&nbsp;&nbsp;&nbsp;使用hooks后同一功能的代码被聚合到一起，且与其他功能互不影响，可复用性高，抽离成自定义hooks则可以在任何其他函数式组件中使用。 12345678910111213141516171819202122232425262728293031323334353637383940// 订阅好友在线状态const useFriendStatus = (): &#123;status: boolean, setStatus: (s: boolean = false) =&gt; void&#125; =&gt; &#123; const [status, setStatus]= useState&lt;boolean&gt;(false) useEffect(() =&gt; &#123; const isOnline = ChatAPI.subscribeToFriendStatus( this.props.friend.id, this.handleStatusChange ); setStatus(isOnline) return () =&gt; &#123; ChatAPI.unsubscribeFromFriendStatus( this.props.friend.id, this.handleStatusChange ); &#125; &#125;, []) return &#123;status, setStatus&#125;&#125;// 修改网页标题const useDocumentTitle = (): &#123;count: number, setCount: (c: number = 0) =&gt; void&#125; =&gt; &#123; const [count, setCount] = useState&lt;number&gt;(0) useEffect(() =&gt; &#123; document.title = `You clicked $&#123;this.state.count&#125; times`; &#125;, [count]) return &#123;count, setCount&#125;&#125;const FriendStatusWithCounter: React.FC = () =&gt; &#123; const &#123;count, setCount&#125; = useDocumentTitle() const &#123;status, setStatus&#125; = useFriendStatus() return ( &lt;div&gt; &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;点击&lt;/button&gt; &lt;button onClick=&#123;() =&gt; setStatus(!status)&#125;&gt;点击&lt;/button&gt; &lt;div&gt;在线状态&#123;status&#125;&lt;/div&gt; &lt;/div&gt; )&#125; &nbsp;&nbsp;&nbsp;&nbsp; 抽离出的useDocumentTitle、useFriendStatus两个自定义hook是两个完全独立互不影响且可复用的hook，每个自定义hook只专注于各自负责的功能模块，这样可以将组件拆分成更小的粒度，不同的功能逻辑封装成不同的hook，各个hook输出的内容完全取决于输入，与其他功能分离，职责单一，利于测试。]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6]]></title>
    <url>%2Fblog%2FES6%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[箭头函数 箭头函数自动绑定上下文，即this的指向不是在调用时决定，而是在定义时就已经指定好了this的指向 不可以使用new命令当做构造函数使用 函数内部不能访问arguments对象 参数只有一个时，可以省略括号 当有返回值且代码只有一行时，可以省略函数体的花括号，直接用括号表示 装饰器(修饰器) 可以修改类的函数 在编译时执行 第一个参数为要修饰的类 装饰器后面紧跟要被修饰的类 12345678910const decorator = (target) =&gt; &#123; target.age = 15&#125;@decoratorclass Person &#123; constructor() &#123; this.age = 18 &#125;&#125; 如果想接收多个参数，也可以以返回函数的形式 123456789101112131415161718const decorator = (payload) =&gt; &#123; return function(target) &#123; target.age = payload &#125;&#125;@decorator(18)class Person &#123; constructor() &#123; this.age = 12 &#125; speak() &#123; console.log(`我的年纪是$&#123;this.age&#125;`) &#125;&#125;const human = new Person()human.speak() class类的继承 通过关键字 extends 实现class的继承 123456789101112131415161718192021222324class Parent &#123; constructor(name) &#123; this.name = name &#125; speak() &#123; console.log(`我的名字叫$&#123;this.name&#125;`) &#125; walk() &#123; console.log(`$&#123;this.name&#125;正在行走`) &#125;&#125;class Son extends &#123; constructor(name) &#123; super() this.name = name &#125; speak() &#123; console.log(`我的名字叫$&#123;this.name&#125;`) &#125;&#125;const parent = new Parent("王五")const son = new Son("张三")son.walk() // 张三正在行走 继承父类的子类的constructor构造函数里必须调用super()方法 123456789101112131415161718192021 class Parent &#123; constructor(options = &#123;&#125;) &#123; for(let key in options) &#123; if(options.hasOwnProperty(key)) &#123; this[key] = options[key] &#125; &#125; &#125; &#125;class Son extends Parent &#123; constructor(options = &#123;&#125;) &#123; for(let key in options) &#123; if(options.hasOwnProperty(key)) &#123; this[key] = options[key] &#125; &#125; &#125;&#125;const son = new Son(&#123;name: '张三'&#125;)//报错: Uncaught ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor super可以被当做对象或者方式使用，当做对象使用时，super相当于父类构造函数的原型 prototype属性；当做方法调用时代表调用父类的构造函数，相当于Parent.prototype.constructor.call(this)，且super()方法只能在子类的构造函数里使用，使用在其他地方均会报错 super当做对象在子类原型方法中使用时，相当于是使用父类的原型，所以当使用定义在父类实例上的方法时会报错；且super调用父类原型上的方法时，方法中的this指向子类的实例; 当做对象在子类静态方法或属性中使用时，super指向父类； 123456789101112131415161718192021class Parent &#123; constructor() &#123; this.name = "爸爸" &#125; speak() &#123; console.log(`我的名字叫$&#123;this.name&#125;`) &#125;&#125;class Son extends Parent &#123; constructor() &#123; super() this.name = "儿子" &#125; speak() &#123; super.speak() &#125;&#125;const son = new Son()son.speak()// 我的名字叫儿子； 因为son继承Parent父类，son可以访问父类原型上的方法，但是此时speak方法中的this指向子类]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fblog%2FHelloWorld%2F</url>
    <content type="text"><![CDATA[第一遍博文献给Hellow World]]></content>
  </entry>
  <entry>
    <title><![CDATA[权利的游戏]]></title>
    <url>%2Fblog%2F%E6%9D%83%E5%8A%9B%E7%9A%84%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[一周等一集的寂寞谁能懂？好在每一集都还挺长，稍稍能给点安慰，只不过腾讯每次都删减“激情”部分，就很不爽每次一到 “刺激” “关键” 时候 就给你直接掐断，看看这是人干的事吗？]]></content>
      <categories>
        <category>影视</category>
      </categories>
      <tags>
        <tag>权利的游戏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于前端]]></title>
    <url>%2Fblog%2F%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%2F</url>
    <content type="text"><![CDATA[关于前端接触前端2年多了，从最开始的的html、css、javascript到如今各种前端框架vue、react、angular，还有各种打包工具等等，各种新技术层出不穷。往往是上一个技术点还没完全掌握，下一次更新就已经来了，得益于node.js在服务端的蓬勃发展，各种基于node的前端工具也是百花齐放。百家争鸣肯定是好的，但是也给从事前端的同学们造成了不小的学习压力，而且太多的选择会给人一种杂乱不统一的感觉，在开发过程中需要一个经验丰富的资深大佬来带领做抉择，年轻的前端开发者往往会困于经验，盲目跟进选择，导致后面的开发过程中如果遇上由工具或框架本身带来的坑，而手足无措，无法解决问题。有人说之所以学起来会觉得吃力是因为js基础掌握不牢固导致的，对于这种说法我不是很认同，js基础固然是很重要的一方面，但是在代码的世界里抽象的思维能力才是最重要的，很多著名的开源库，我相信大部分工作了几年的前端程序员都是能看得懂每一份文件里代码所做的工作的，但是将这些文件组合起来看时，就会不明所以，不知道为何要这样做，这样做的目的好处是什么。因为代码不仅仅只体现一个程序员的码力，更多的是体现一个程序员的思维能力。学习一个库的过程最开始是学些如何使用，进阶是如何优化，最后是学习并理解作者的编程思想。所以当学习某个框架或库时觉得吃力，更多的原因是理解不了作者的编程思想，而编程思想更多的与从业年限资历有关，当然js基础是理解编程思想的最基本也是最不可缺少的前提。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>前端,</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[权游结局]]></title>
    <url>%2Fblog%2F%E6%9D%83%E6%B8%B8%E7%BB%93%E5%B1%80%2F</url>
    <content type="text"><![CDATA[权游烂尾虽然权游已经播完一段时间了，但是还是忍不住吐槽，因为烂尾得实在太严重了，看到第四集布兰坐在心树下化身三眼乌鸦飞出临冬城，还以为是要放大招，对夜王来个必杀一击，再不济，抵挡一下尸鬼前进的脚步也好啊，结果。。。就一直在那翻白眼 ？？？ 夜王被二丫杀死，虽然有点意外但也还能接受，毕竟前几季也一直有各种暗示，但是你好歹也讲一下夜王的来龙去脉，对喊了八季的 “凛冬将至”做一个完美收场吧，结果一句没提，就这么过去了 ？？？ 最后攻打君临，在经历过惨烈的临冬城守卫战后，按照正常战场情况来说，无垢者和多斯拉克骑兵可以算是编制都打没了，多斯拉克骑兵第一波冲锋，从镜头来看，回来的只有几个零零散散的几个溃兵，基本上全报销了；再说无垢者，本来就只有几千的兵力，为了给其他人殿后，守在城门口硬抗汹涌不断的尸潮，破城后城内主力包括北境军队在内对上尸鬼大军后，几乎是被单方面屠杀，连熊家少主都死了，临冬城之战后，龙妈的两只军队 无垢者和多斯拉克骑兵已都死的差不多了，镜头一转到进攻君临城时，我是不知道龙妈从哪又弄来那么多无垢者和多斯拉克骑兵，在龙妈骑龙打尤伦的海军还顾不上陆地战时，龙妈的军队就已经能碾压君临城守军了，君临可是有两万整的黄金团兵力，这还不算君临本来就有的金袍子在内，龙妈算是开挂了吧！ 最后最后，君临城敲响投降的钟声后，想不通一直主张以德服人的龙妈怎么突然就杀性大发，骑龙屠城了！！！？？？辛辛苦苦塑造的仁义之君、奴隶解放者形象就这样丢了！ 然后被口口声声说我爱你的雪诺吻杀。。。 权游最后一集太多人物崩坏了，也就三傻人物设定一直在线，其他的感觉跟前几季都不是一个人，一直以聪明著称的小恶魔，最后出得都是什么馊主意，出的主意基本都没实现过，瓦里斯这个情报大王也根本没体现出他的情报能力，太多人物跟前几季的人物形象对不上。 虎头蛇尾！]]></content>
      <tags>
        <tag>影视</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6对象新增属性和方法]]></title>
    <url>%2Fblog%2FES6%E5%AF%B9%E8%B1%A1%E6%96%B0%E5%A2%9E%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Object新增方法 Obejct.is() 判断两个数是否相等 接收两个参数，可以是任何值。 与 == 运算符不同的是Object.is()不会对右边的值进行隐式转换 与 === 运算符基本表现一致，都是严格比较 不过 null Object.assign() 将源对象可枚举属性拷贝至目标对象1.]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>es6 学习 对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redux-saga初探 仿造dva]]></title>
    <url>%2Fblog%2Fredux%2F</url>
    <content type="text"><![CDATA[基于redux-saga仿造dva的小轮子 在开发第一个react项目时，之前一直是用的vue进行开发，对react和react的生态了解不多；老大给了我们一个周的时间去学习，在学完react的基本语法后 就开始考虑如何管理react项目的各种状态，vue有配套的vuex，可以进行同步操作和异步操作，react呢？redux虽然强大 但是如果要进行异步操作，需要自己封装中间件，一个周的时间根本没办法学完这么多，（臣妾做不到啊 o(╥﹏╥)o）， 只能寻找redux的替代品，最终选择了dva； dva文档简洁，api少，总共就6个api。易上手，项目结构清晰。对第一次接触的开发者很友好； 项目开发完才知道，dva是基于redux和redux-saga的，异步操作是把redux-saga的api封装了一遍，好奇心去看了眼redux-saga的文档。。。api多的有点让我晕头。 咬牙花了好几天反复看了好几遍文档，才逐渐摸清redux-saga的异步操作以及关联到store和组件的基本流程，不否认redux-saga的功能的确强大，对异步流程的控制简直武装到牙齿，但是。。。。开发过程中很多功能基本用不到。。。 最关键的redux-saga文档里没有关于模块化的介绍，对于团队开发来说，模块化至关重要，联想到dva的模块化方式后，自己也按奈不住内心的饥渴，尝试去封装redux-saga，能够像dva那样进行模块化开发 思路原理 每一个模块是一个单独的对象 同步操作放在reducers中 异步操作放在effects中，利用namespace字段为每个模块添加模块标识 在创建saga之前，对每一个模块进行修饰改造，通过namespace模块标识字段，为每个模块的reducers和effects添加前缀 namespace/reducers | effects key名 封装redux-saga的put方法，在原来的基础上再包装一层，将改造后actiontype传入。 使用redux-saga的fork和take方法构建新的高阶api takeEvery，在takeEvery方法中，监听提交的action和payload参数，将actiontype使用新的put方法改造后，作为第一个参数 传入fork中，再将put call select等api一起作为第二个api传入fork中，使每一个effects的异步操作中能发起其他action core code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133import * as reduxSaga from 'redux-saga/effects';let &#123; put, call, select, take, fork, cancel &#125; = reduxSagaconst sagaPut = putclass createSaga &#123; constructor(models = []) &#123; this.models = models this.reducers = &#123;&#125; &#125; /** *检查models是否为数组或对象 * @memberof createSaga */ checkModels() &#123; const models_type = Object.prototype.toString.call(this.models) if (models_type !== '[object Object]' &amp;&amp; models_type !== '[object Array]') &#123; throw new Error("请确保传入的模块为数组或模块对象") &#125; else if (models_type !== '[object Array]') &#123; this.models = [this.models] &#125; &#125; /** *为reducer和effect添加前缀 * * @param &#123;*&#125; model 模块 * @param &#123;*&#125; type reducer | effect * @returns * @memberof createSaga */ moudlePrefix(model,type) &#123; if(type !== 'reducers' &amp;&amp; type !== 'effect') return; const modelProperty = model[type] for (const key in modelProperty) &#123; if (modelProperty.hasOwnProperty(key)) &#123; modelProperty[`$&#123;model.namespace&#125;/$&#123;key&#125;`] =modelProperty[key] Reflect.deleteProperty(modelProperty, key) &#125; &#125; return modelProperty; &#125; /** *改造saga的put方法； *将原本的action参数修改为两个 *第一个参数为dispatch提交的载荷，第二个为redux的各类effect * @param &#123;*&#125; namespace 模块名 * @returns * @memberof createSaga */ decoratePut(namespace) &#123; put = (action) =&gt; &#123; const effect_type = action.type.includes('/') ? action.type : namespace + '/' + action.type return sagaPut(&#123; ...action, type: effect_type &#125;); &#125; &#125; /** *生产异步reducer（takeLatest） * @param &#123;*&#125; namespace 模块名 * @param &#123;*&#125; key 异步effect名 * @param &#123;*&#125; effect 异步操作 * @returns * @memberof createSaga */ takeLatest(namespace, key, effect) &#123; const _this = this return fork(function* () &#123; let lastTask while (true) &#123; // 获取dispatch 的action参数 const payload = yield take( key) // 如果上已有上一个任务，则取消上一个任务，构建高阶api if (lastTask) &#123; yield cancel(lastTask) &#125; // 改造put方法 _this.decoratePut(namespace) // 删除action中的type参数 Reflect.deleteProperty(payload, 'type') // 获取redux-saga的Task任务 lastTask = yield fork(effect[key], payload, &#123; put, call, select &#125;) &#125; &#125;) &#125; /** *初始化models,生成符合redux-saga要求的saga对象 * * @returns * @memberof createSaga */ *createEffects() &#123; const _this = this for (const model of this.models) &#123; _this.moudlePrefix(model,'effect') // 每一个model都生成有个saga const &#123; effect, namespace &#125; = model for (const key in effect) &#123; if (effect.hasOwnProperty(key)) &#123; yield function () &#123; return _this.takeLatest(namespace, key, effect) &#125;() &#125; &#125; &#125; &#125; /** *为每个模块的reducer和effect添加前缀 生成reucers * @param &#123;*&#125; model 模块 * @returns * @memberof createSaga */ createReducers() &#123; for (const model of this.models) &#123; this.moudlePrefix(model,'reducers') this.reducers[model.namespace] = (state = model.state, action = &#123;&#125;) =&gt; ( model.reducers[action.type] ? model.reducers[action.type](state, action) : state ) &#125; return this.reducers &#125;&#125;export default function (models) &#123; const instance = new createSaga(models) instance.checkModels() return instance&#125; 启动方法12345678910111213141516import &#123; createStore, combineReducers, applyMiddleware &#125; from 'redux'import createSagaMiddleware from 'redux-saga';import createSaga from "./createSaga"export default function(&#123;models&#125;) &#123; const initSaga = createSaga(models) const rootSaga = initSaga.createEffects const reducers = initSaga.createReducers() const sagaMiddleware = createSagaMiddleware() const store = createStore( combineReducers(reducers), applyMiddleware(sagaMiddleware) ) sagaMiddleware.run(rootSaga.bind(initSaga)) return store;&#125; Example1234567891011121314151617181920212223242526272829303132333435363738394041// 模块import &#123; delay &#125; from "redux-saga/effects"import * as types from "types" // action类型文件，根据文件大小决定是否单独新开一个文件export default &#123; namespace: 'nav', state: &#123; age: 18, name: '张三' &#125;, effect: &#123; *add_age_async(&#123; num &#125;,&#123;put,call,select&#125;) &#123; yield delay(1000) yield put(&#123;type: types.ADD_AGE_SYNC,num: num&#125;) &#125; &#125;, reducers: &#123; [types.ADD_AGE_SYNC](state, action) &#123; return &#123; ...state, age: action.num + state.age &#125; &#125;, add_age_async(state,action) &#123; return &#123; ...state, age: 2 + state.age &#125; &#125; &#125;&#125;// 启动import createTeemo from "Teemo"import home from "home" // 模块文件import nav from "nav" // 模块文件const store = createTeemo(&#123; models: [home,nav]&#125;)export default store// 将store在项目的入口文件app.js中引入，挂载到根节点中]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端 redux dva</tag>
      </tags>
  </entry>
</search>
